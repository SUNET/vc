package apiv1

import (
	"context"
	"reflect"
	"testing"
	"vc/pkg/logger"
	"vc/pkg/model"
	//	"github.com/stretchr/testify/assert"
)

// TODO(mk): generate a new version of VALID_EHIC_SD_JWT after bugs have been fixed and merged to main

// VALID_EHIC_SD_JWT with three disclosures and exp 100 years from 20241113
//
// ATTENTION: created using mockas while bugs with attibute-names existed, for example: givenName in disclosure and firstName in claim...
//
// "alg": "ES256",
// "typ": "sd-jwt"
// "_sd_alg": "sha-256"
const VALID_EHIC_SD_JWT = "eyJhbGciOiJFUzI1NiIsInR5cCI6InNkLWp3dCJ9.eyJfc2RfYWxnIjoic2hhLTI1NiIsImNhcmRIb2xkZXIiOnsiX3NkIjpbIk9Ua3pObVkzTkdObVlqTXhOamxpTVRabE1qSXpObUppTkRsak9ERXlZakUxTVdReVpqUm1ZbU0xTVdaa01qZzVaRFppTldJNU1UYzJPRGxtTjJVelpnIiwiTmpGall6QTFNVFEyT1RrNVkySXlPV0UzTURWbU1tRmtNemd3TVRNek1UazJaV1k1WmpWa1lqWXlZalkxT1RRMU5HTXlOVEkwWlRkbE4yVTFZV1ZqTkEiLCJPRFExWWpKbU5HRmxZekUxTW1RMlpHSm1PR001WXpJM05qWXlORFZqTlRRM016VXdZVGt5TVRjd05ESTJOVEV5WkRnNU5HTXdPREpsTmpJeU1EaGlNQSJdLCJjYXJkaG9sZGVyU3RhdHVzIjoiYWN0aXZlIiwiaWQiOiJmZjhhYTYwOS1jMTVjLTQ4NDctODFmMS0zNTBjMjdjMzAyYTUifSwiY2FyZEluZm9ybWF0aW9uIjp7ImV4cGlyeURhdGUiOiIyMDIxLTEyLTI5IDA0OjEyOjA3Ljc3MDMxMTc2OSArMDAwMCBVVEMiLCJpZCI6ImZhNmY0ZTFmLTA0ZDctNDg2Ni05OTkxLTNhMWFmZWNjYzQ2YyIsImludmFsaWRTaW5jZSI6IjE5OTgtMDEtMDcgMTE6MjI6NTUuNzk3NzQyODQxICswMDAwIFVUQyIsImlzc3VhbmNlRGF0ZSI6IjIwMDctMTEtMzAgMTQ6MjU6MzEuMDI5OTA4NDQgKzAwMDAgVVRDIiwic2lnbmF0dXJlIjp7Imlzc3VlciI6IkJ1c2luZXNzIE1vbml0b3IgSW50ZXJuYXRpb25hbCIsInNlYWwiOiIxNmIwNTc4Ny0xYjVkLTRiOGUtYjJhZi1hOTE1MzI2MjIxNzAifSwidmFsaWRTaW5jZSI6IjE5NTItMDMtMTYgMTM6MjI6MjMuNDAxODQ4NTEzICswMDAwIFVUQyJ9LCJjbmYiOnsiandrIjp7ImNydiI6IlAtMjU2IiwiZCI6IlY1cndBdlVJeF9pdDV5QTlDVFpWQXNjYTE0YjlrakFpYk0zR3NvS25fd2siLCJraWQiOiJzaW5naW5nXyIsImt0eSI6IkVDIiwieCI6IkNkajd6MHFna2hpRHFVY2RRTFBINGMzaDNpY1Q0Yk9QNWFJampVX2h1LUkiLCJ5IjoiRnlfdnozd25jNXQxb1dJTVh0YVNoZXhVZGRZLUV5blJPZGFpRFJ0ZGY2MCJ9fSwiY29tcGV0ZW50SW5zdGl0dXRpb24iOnsiaWQiOiJmMTM3M2ZjNy1lMzBkLTQ0OTEtYjQ1Yy0xOWJjOGY4NzdiNWMiLCJpbnN0aXR1dGlvbk5hbWUiOiJNZXJyaWxsIEx5bmNoIn0sImV4cCI6NDg4NzI3OTk0MCwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuc3VuZXQuc2UiLCJuYmYiOjE3MzE1MjAzNTEsInBpZCI6eyJleGhpYml0b3JJRCI6IjczMzc1OTExMDUiLCJmaXJzdE5hbWUiOiJHZW5ldmlldmUiLCJnZW5kZXIiOiJtYWxlIiwibGFzdE5hbWUiOiJNY0NsdXJlIn0sInNpZ25hdHVyZSI6eyJpc3N1ZXIiOiJWaW1vIiwic2VhbCI6ImFiNGQ2YWQ3LWM5NjMtNDEzYi05MzU2LTkxZWNlYTliZjM4NyJ9LCJzdGF0dXMiOiIiLCJ2Y3QiOiJodHRwczovL2NyZWRlbnRpYWwuc3VuZXQuc2UvaWRlbnRpdHlfY3JlZGVudGlhbCJ9.h3twlrn3z0bl5NpWHqYLeSTHDl8h9xf69hA932_9aGaYdyw12ZNjHN9LfdMc2KFO4mm5pgdgAi8pVbWNgm61AQ~WyJSVEVzUGxsWGJGRm5UV1JIV3kxUUxVQSIsImdpdmVuTmFtZSIsIkdlbmV2aWV2ZSJd~WyJSeTF1TVRBME9sRm5URTU5VDJSMVhUMCIsImZhbWlseU5hbWUiLCJNY0NsdXJlIl0~WyJZR3QzTHpNN0pHQTFPVjk2ZWpVME5qTSIsImJpcnRoRGF0ZSIsIjE5NjYtMDktMjYgMDI6MTM6MjkuNjQyMTA2NzA3ICswMDAwIFVUQyJd~"

// TAMPERED_PAYLOAD_EHIC_SD_JWT same as VALID_EHIC_SD_JWT but one char in jwt payload has been changed
const TAMPERED_PAYLOAD_EHIC_SD_JWT = "eyJhbGciOiJFUzI1NiIsInR5cCI6InNkLWp3dCJ9.eyJfc2RfYWxnIjoic3hhLTI1NiIsImNhcmRIb2xkZXIiOnsiX3NkIjpbIk9Ua3pObVkzTkdObVlqTXhOamxpTVRabE1qSXpObUppTkRsak9ERXlZakUxTVdReVpqUm1ZbU0xTVdaa01qZzVaRFppTldJNU1UYzJPRGxtTjJVelpnIiwiTmpGall6QTFNVFEyT1RrNVkySXlPV0UzTURWbU1tRmtNemd3TVRNek1UazJaV1k1WmpWa1lqWXlZalkxT1RRMU5HTXlOVEkwWlRkbE4yVTFZV1ZqTkEiLCJPRFExWWpKbU5HRmxZekUxTW1RMlpHSm1PR001WXpJM05qWXlORFZqTlRRM016VXdZVGt5TVRjd05ESTJOVEV5WkRnNU5HTXdPREpsTmpJeU1EaGlNQSJdLCJjYXJkaG9sZGVyU3RhdHVzIjoiYWN0aXZlIiwiaWQiOiJmZjhhYTYwOS1jMTVjLTQ4NDctODFmMS0zNTBjMjdjMzAyYTUifSwiY2FyZEluZm9ybWF0aW9uIjp7ImV4cGlyeURhdGUiOiIyMDIxLTEyLTI5IDA0OjEyOjA3Ljc3MDMxMTc2OSArMDAwMCBVVEMiLCJpZCI6ImZhNmY0ZTFmLTA0ZDctNDg2Ni05OTkxLTNhMWFmZWNjYzQ2YyIsImludmFsaWRTaW5jZSI6IjE5OTgtMDEtMDcgMTE6MjI6NTUuNzk3NzQyODQxICswMDAwIFVUQyIsImlzc3VhbmNlRGF0ZSI6IjIwMDctMTEtMzAgMTQ6MjU6MzEuMDI5OTA4NDQgKzAwMDAgVVRDIiwic2lnbmF0dXJlIjp7Imlzc3VlciI6IkJ1c2luZXNzIE1vbml0b3IgSW50ZXJuYXRpb25hbCIsInNlYWwiOiIxNmIwNTc4Ny0xYjVkLTRiOGUtYjJhZi1hOTE1MzI2MjIxNzAifSwidmFsaWRTaW5jZSI6IjE5NTItMDMtMTYgMTM6MjI6MjMuNDAxODQ4NTEzICswMDAwIFVUQyJ9LCJjbmYiOnsiandrIjp7ImNydiI6IlAtMjU2IiwiZCI6IlY1cndBdlVJeF9pdDV5QTlDVFpWQXNjYTE0YjlrakFpYk0zR3NvS25fd2siLCJraWQiOiJzaW5naW5nXyIsImt0eSI6IkVDIiwieCI6IkNkajd6MHFna2hpRHFVY2RRTFBINGMzaDNpY1Q0Yk9QNWFJampVX2h1LUkiLCJ5IjoiRnlfdnozd25jNXQxb1dJTVh0YVNoZXhVZGRZLUV5blJPZGFpRFJ0ZGY2MCJ9fSwiY29tcGV0ZW50SW5zdGl0dXRpb24iOnsiaWQiOiJmMTM3M2ZjNy1lMzBkLTQ0OTEtYjQ1Yy0xOWJjOGY4NzdiNWMiLCJpbnN0aXR1dGlvbk5hbWUiOiJNZXJyaWxsIEx5bmNoIn0sImV4cCI6NDg4NzI3OTk0MCwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuc3VuZXQuc2UiLCJuYmYiOjE3MzE1MjAzNTEsInBpZCI6eyJleGhpYml0b3JJRCI6IjczMzc1OTExMDUiLCJmaXJzdE5hbWUiOiJHZW5ldmlldmUiLCJnZW5kZXIiOiJtYWxlIiwibGFzdE5hbWUiOiJNY0NsdXJlIn0sInNpZ25hdHVyZSI6eyJpc3N1ZXIiOiJWaW1vIiwic2VhbCI6ImFiNGQ2YWQ3LWM5NjMtNDEzYi05MzU2LTkxZWNlYTliZjM4NyJ9LCJzdGF0dXMiOiIiLCJ2Y3QiOiJodHRwczovL2NyZWRlbnRpYWwuc3VuZXQuc2UvaWRlbnRpdHlfY3JlZGVudGlhbCJ9.h3twlrn3z0bl5NpWHqYLeSTHDl8h9xf69hA932_9aGaYdyw12ZNjHN9LfdMc2KFO4mm5pgdgAi8pVbWNgm61AQ~WyJSVEVzUGxsWGJGRm5UV1JIV3kxUUxVQSIsImdpdmVuTmFtZSIsIkdlbmV2aWV2ZSJd~WyJSeTF1TVRBME9sRm5URTU5VDJSMVhUMCIsImZhbWlseU5hbWUiLCJNY0NsdXJlIl0~WyJZR3QzTHpNN0pHQTFPVjk2ZWpVME5qTSIsImJpcnRoRGF0ZSIsIjE5NjYtMDktMjYgMDI6MTM6MjkuNjQyMTA2NzA3ICswMDAwIFVUQyJd~"

// EXP_PDA1_SD_JWT expired but otherwise valid BUT OLD DEV VERSION of PDA1
const EXP_PDA1_SD_JWT = "eyJhbGciOiJFUzI1NiIsInR5cCI6InNkLWp3dCJ9.eyJfc2RfYWxnIjoic2hhLTI1NiIsImFjdGl2aXR5RW1wbG95bWVudERldGFpbHMiOnsibm9GaXhlZEFkZHJlc3MiOmZhbHNlLCJub0ZpeGVkQWRkcmVzc0Rlc2NyaXB0aW9uIjoiIiwid29ya1BsYWNlQWRkcmVzc2VzIjpbXSwid29ya1BsYWNlQWRkcmVzc2VzQmxvYiI6IjIwODQgTGFrZSBJc2xhbmRmb3J0LCBQb3J0bGFuZCwgVXRhaCA0MTExNyIsIndvcmtQbGFjZU5hbWVzIjpbXSwid29ya1BsYWNlTmFtZXNCbG9iIjoiRW5zY28ifSwiY25mIjp7Imp3ayI6eyJjcnYiOiJQLTI1NiIsImQiOiJWNXJ3QXZVSXhfaXQ1eUE5Q1RaVkFzY2ExNGI5a2pBaWJNM0dzb0tuX3drIiwia2lkIjoic2luZ2luZ18iLCJrdHkiOiJFQyIsIngiOiJDZGo3ejBxZ2toaURxVWNkUUxQSDRjM2gzaWNUNGJPUDVhSWpqVV9odS1JIiwieSI6IkZ5X3Z6M3duYzV0MW9XSU1YdGFTaGV4VWRkWS1FeW5ST2RhaURSdGRmNjAifX0sImNvbXBsZXRpbmdJbnN0aXR1dGlvbiI6eyJfc2QiOlsiTkRkbE0yUmpaalE0TjJSa1l6Y3dZelUxWWpNNE1tWTNOek15WlRobU56UmxZVEJsWWpFek9ESTJPV1F6TVRFMlpUTmhNV0ZtTlRFeU5ERmlOVGc0WVEiXSwiZGF0ZSI6IjIwMjQtMTEtMTNUMTg6MDM6MjMuNjU4MzU4NTQ5WiIsImVtYWlsIjoiam9lc3Boa3VuZGVAcmljZS5uYW1lIiwiaW5zdGl0dXRpb25JRCI6Ijg0NjAwMTQyMDgiLCJuYW1lIjoiU3RhbmRhcmQgYW5kIFBvb3IncyIsIm9mZmljZUZheE5vIjoiMjc4MzMwMjA0MSIsInNpZ25hdHVyZSI6IiJ9LCJlbXBsb3ltZW50RGV0YWlscyI6eyJlbXBsb3llZSI6ZmFsc2UsImVtcGxveWVyU2VsZkVtcGxveWVkQWN0aXZpdHlDb2RlcyI6W10sIm5hbWVCdXNpbmVzc05hbWUiOiJPblN0YXIiLCJyZWdpc3RlcmVkQWRkcmVzcyI6eyJidWlsZGluZ05hbWUiOiIiLCJjb3VudHJ5Q29kZSI6IkVFIiwicG9zdENvZGUiOiIzODMyOCIsInJlZ2lvbiI6IkNhbGlmb3JuaWEiLCJzdHJlZXRObyI6IjI4OSIsInRvd24iOiJHYXJsYW5kIn0sInNlbGZFbXBsb3llZEFjdGl2aXR5IjpmYWxzZX0sImV4cCI6MTczMTUyMTQyNCwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuc3VuZXQuc2UiLCJtZW1iZXJTdGF0ZUxlZ2lzbGF0aW9uIjp7ImNlcnRpZmljYXRlRm9yRHVyYXRpb25BY3Rpdml0eSI6ZmFsc2UsImRldGVybWluYXRpb25Qcm92aXNpb25hbCI6ZmFsc2UsImVuZGluZ0RhdGUiOiIyMDI5LTExLTEyVDE4OjAzOjIzLjY1ODM1MjM4NFoiLCJtZW1iZXJTdGF0ZVdoaWNoTGVnaXNsYXRpb25BcHBsaWVzIjoiTVQiLCJzdGFydGluZ0RhdGUiOiIyMDI0LTExLTEzVDE4OjAzOjIzLjY1ODM1MjMzNFoiLCJ0cmFuc2l0aW9uUnVsZXNBcHBseUFzRUM4ODMyMDA0IjpmYWxzZX0sIm5iZiI6MTczMTUyMTAyOSwicGVyc29uYWxEZXRhaWxzIjp7Il9zZCI6WyJaVE14WW1WaFpHWXhaakl3Wm1Ka09HSXhOemRtTW1ReU5UVTFNemN6WVdReE1XTTRPRFJpTmpWbE1tUXpPV05tTkRsa1pEbGlOR1poTW1RNE4ySTNPQSJdLCJmb3JlbmFtZXMiOiJCdXJkZXR0ZSIsIm5hdGlvbmFsaXR5IjoiU0UiLCJwZXJzb25hbElkZW50aWZpY2F0aW9uTnVtYmVyIjoiNDk1NTM3NjI2NyIsInBsYWNlQmlydGgiOnsiY291bnRyeUNvZGUiOiJJVCIsInJlZ2lvbiI6IkFzaWEvQXF0YXUiLCJ0b3duIjoiTGFyZWRvIn0sInNleCI6IjAyIiwic3RhdGVPZlJlc2lkZW5jZUFkZHJlc3MiOnsiYnVpbGRpbmdOYW1lIjoibGV2ZXJhZ2VidWlsZGluZyIsImNvdW50cnlDb2RlIjoiQ1oiLCJwb3N0Q29kZSI6IjM0NTgwIiwicmVnaW9uIjoiSW93YSIsInN0cmVldE5vIjoiMTQ5IiwidG93biI6IkNpbmNpbm5hdGkifSwic3RhdGVPZlN0YXlBZGRyZXNzIjp7ImJ1aWxkaW5nTmFtZSI6IiIsImNvdW50cnlDb2RlIjoiQkciLCJwb3N0Q29kZSI6IiIsInJlZ2lvbiI6IiIsInN0cmVldE5vIjoiIiwidG93biI6IiJ9LCJzdXJuYW1lIjoiTWFydmluIiwic3VybmFtZUF0QmlydGgiOiJNYXJ2aW4ifSwic3RhdHVzIjoiIiwic3RhdHVzQ29uZmlybWF0aW9uIjp7ImNpdmlsQW5kRW1wbG95ZWRTZWxmRW1wbG95ZWQiOmZhbHNlLCJjaXZpbFNlcnZhbnQiOmZhbHNlLCJjb250cmFjdFN0YWZmIjpmYWxzZSwiZW1wbG95ZWRBbmRTZWxmRW1wbG95ZWQiOmZhbHNlLCJlbXBsb3llZFR3b09yTW9yZVN0YXRlcyI6ZmFsc2UsImV4Y2VwdGlvbiI6ZmFsc2UsImV4Y2VwdGlvbkRlc2NyaXB0aW9uIjoiIiwiZmxpZ2h0Q3Jld01lbWJlciI6ZmFsc2UsIm1hcmluZXIiOnRydWUsInBvc3RlZEVtcGxveWVkUGVyc29uIjpmYWxzZSwicG9zdGVkU2VsZkVtcGxveWVkUGVyc29uIjpmYWxzZSwic2VsZkVtcGxveWVkVHdvT3JNb3JlU3RhdGVzIjpmYWxzZSwid29ya2luZ0luU3RhdGVVbmRlcjIxIjpmYWxzZX0sInZjdCI6Imh0dHBzOi8vY3JlZGVudGlhbC5zdW5ldC5zZS9pZGVudGl0eV9jcmVkZW50aWFsIn0.0zKsBV4ErZhEPQtbZXih8gPeYrIEsVbuovnUmea7FgzU9Gkokq0emmJQ79j50ibiLUt6TZPnd3jngBmWW8aBSQ~WyJTbkJkWERRbFpXaGRVbkUyZmp0ZVIzTSIsImFkZHJlc3MiLHsiYnVpbGRpbmdOYW1lIjoiIiwiY291bnRyeUNvZGUiOiJJRSIsInBvc3RDb2RlIjoiIiwicmVnaW9uIjoiIiwic3RyZWV0Tm8iOiIiLCJ0b3duIjoiIn1d~WyJXR1JGUEd3d1huazJZbE5uVzM1b1p6MCIsImRhdGVCaXJ0aCIsIjE5MjMtMDctMDQgMTM6NTI6MDMuMDM1MzU3OTk1ICswMDAwIFVUQyJd~"

func TestClient_VerifyCredential(t *testing.T) {
	tests := []struct {
		name     string
		fields   fields
		args     args
		want     *VerifyCredentialReply
		errorExp bool
	}{
		newVerifyTestCase("Not credential provided 1", "", false, MsgNoCredentialProvided, false),
		newVerifyTestCase("Not credential provided 2", " ", false, MsgNoCredentialProvided, false),

		newVerifyTestCase("Not a jwt 1", "               .                         .                          ~", false, MsgNotAJwt, false),
		newVerifyTestCase("Not a jwt 2", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", false, MsgNotAJwt, false),
		newVerifyTestCase("Not a jwt 3", "xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx", false, MsgNotAJwt, false),
		newVerifyTestCase("Not a jwt 4", "xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx", false, MsgNotAJwt, false),
		newVerifyTestCase("Not a jwt 5", "xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx", false, MsgNotAJwt, false),

		newVerifyTestCase("Header typ does not contains sd-jwt", "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx~", false, "supported jwt header.typ are: sd-jwt, vc+sd-jwt", false),

		newVerifyTestCase("Header alg not ES256", "eyJhbGciOiJIUzI1NiIsInR5cCI6InNkLWp3dCJ9.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx~", false, "supported jwt header.alg are: ES256", false),

		newVerifyTestCase("Missing or invalid JWK", "eyJhbGciOiJFUzI1NiIsInR5cCI6InNkLWp3dCJ9.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxx~", false, MsgInvalidJwk, false),

		newVerifyTestCase("Tampered jwt payload in EHIC", TAMPERED_PAYLOAD_EHIC_SD_JWT, false, MsgUnableToParseToken, false),
		newVerifyTestCase("Expired signature", EXP_PDA1_SD_JWT, false, MsgUnableToParseToken, false),

		newVerifyTestCase("Valid EHIC", VALID_EHIC_SD_JWT, true, "", false),
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &Client{
				cfg: tt.fields.cfg,
				log: tt.fields.log,
			}

			got, err := c.VerifyCredential(tt.args.ctx, tt.args.request)

			if (err != nil) && tt.errorExp {
				return
			} else if err != nil {
				t.Errorf("VerifyCredential() error is expected to return error")
				return
			}

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("VerifyCredential() got = %v, want %v", got, tt.want)
			}
		})
	}
}

type fields struct {
	cfg *model.Cfg
	log *logger.Log
}

type args struct {
	ctx     context.Context
	request *Credential
}

func newVerifyTestCase(name, credential string, valid bool, message string, errorExp bool) struct {
	name     string
	fields   fields
	args     args
	want     *VerifyCredentialReply
	errorExp bool
} {
	return struct {
		name     string
		fields   fields
		args     args
		want     *VerifyCredentialReply
		errorExp bool
	}{
		name:   name,
		fields: defaultFields(),
		args: args{
			ctx:     context.Background(),
			request: &Credential{Credential: credential},
		},
		want: &VerifyCredentialReply{
			Valid:   valid,
			Message: message,
		},
		errorExp: errorExp,
	}
}

func defaultFields() fields {
	return fields{
		cfg: &model.Cfg{},
		log: logger.NewSimple("testing_handler"),
	}
}
