---
version: "3"

services:
  apigw:
    container_name: "vc_dev_apigw"
    image: docker.sunet.se/dc4eu/apigw:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
      - /var/log/sunet:/var/log/sunet
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.2
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  issuer:
    container_name: "vc_dev_issuer"
    image: docker.sunet.se/dc4eu/issuer:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
      - /var/log/sunet:/var/log/sunet
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.4
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  verifier:
    container_name: "vc_dev_verifier"
    image: docker.sunet.se/dc4eu/verifier:latest
    restart: always
    volumes:
      - ./cert:/cert:ro
      - ./dev_config_docker.yaml:/config.yaml:ro
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.6
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  registry:
    container_name: "vc_dev_registry"
    image: docker.sunet.se/dc4eu/registry:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.8
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  cache:
    container_name: "vc_dev_cache"
    image: docker.sunet.se/dc4eu/cache:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
    depends_on:
      - redis
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.10
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  persistent:
    container_name: "vc_dev_persistent"
    image: docker.sunet.se/dc4eu/persistent:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.12
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  mockas:
    container_name: "vc_dev_mockas"
    image: docker.sunet.se/dc4eu/mockas:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.13
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  pdfsigner:
    container_name: "vc_dev_pdfsigner"
    image: docker.sunet.se/dc4eu/py_pdfsigner_dev:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
      - /var/log/sunet:/var/log/sunet
    depends_on:
      - redis
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.14
    environment:
      - "CONFIG_YAML=config.yaml"

  pdfvalidator:
    container_name: "vc_dev_pdfvalidator"
    image: docker.sunet.se/dc4eu/py_pdfvalidator_dev:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
      - /var/log/sunet:/var/log/sunet
    # - ./certs/SectigoRSADocumentSigningCA.crt:/app/SectigoRSADocumentSigningCA.crt:ro
    # - ./certs/USERTrustRSAAddTrustCA.crt:/app/USERTrustRSAAddTrustCA.crt:ro
    depends_on:
      - redis
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.16
    environment:
      - "CONFIG_YAML=config.yaml"

  redis:
    image: redis:alpine
    container_name: "vc_dev_redis"
    restart: always
    expose:
      - 6373
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.18

  mongo:
    image: mongo:4.0.10
    container_name: "vc_dev_mongo"
    restart: always
    expose:
      - 27017
    volumes:
      - mongo_data:/data
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.20

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: vc_dev_jaeger
    restart: always
    expose:
      - 16686
      - 4317
      - 4318
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.22
    environment:
      - "COLLECTOR_OTLP_ENABLED=true"

  kafka_1:
    image: docker.io/bitnami/kafka:3.4
    container_name: vc_kafka_1
    ports:
      - "9092:9092"
      - "9094:9094"
    networks:
      vc-net:
        ipv4_address: 172.16.50.12
    volumes:
      - "kafka_data:/bitnami"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: 'NjUyYTNkZjI4NGNhNGRjOG'
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://vc_kafka_1:9092,EXTERNAL://vc_kafka_1:9094'
      KAFKA_BROKER_ID: '1'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@vc_kafka_1:9093'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_NODE_ID: '1'
      BITNAMI_DEBUG: 'yes'
      KAFKA_CFG_NUM_PARTITIONS: '2'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  kafka-ui:
    container_name: vc_kafka_ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka_1
    ports:
      - 8080:8080
    networks:
      vc-net:
        ipv4_address: 172.16.50.13
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      LOGGING_LEVEL_ROOT: 'DEBUG'
    volumes:
      - ./kafka-ui.yaml:/etc/kafkaui/dynamic_config.yaml:ro

  kafka-exporter:
    image: docker.io/bitnami/kafka-exporter:latest
    depends_on:
      - kafka_1
    networks:
      vc-net:
        ipv4_address: 172.16.50.14
    command: --kafka.server=vc_kafka_1:9092
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9308; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s

networks:
  vc-dev-net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-vc-dev
    ipam:
      driver: default
      config:
        - subnet: 172.16.50.0/24
volumes:
  redis_data:
  mongo_data:
  kafka_data:
    driver: local
